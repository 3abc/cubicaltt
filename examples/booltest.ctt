module booltest where

import bool
import newhedberg

falseNotTrue (h : Id bool false true) : N0 = transport (<i> T (h @ i)) tt
  where T : bool -> U = split
    false -> Unit
    true  -> N0

trueNotFalse (h : Id bool true false) : N0 = falseNotTrue (<i> h @ - i)

lemFalse : (b : bool) -> dec (Id bool false b) = split
  false -> inl (<i> false)
  true -> inr falseNotTrue

lemTrue : (b : bool) -> dec (Id bool true b) = split
  false -> inr trueNotFalse
  true -> inl (<i> true)

boolDec : (a b : bool) -> dec (Id bool a b) = split
  false -> lemFalse
  true -> lemTrue

boolSet : set bool = corrhedberg bool boolDec

F2Set : set F2 = subst U set bool F2 boolEqF2 boolSet

T : U = Id F2 oneF2 oneF2
p0 : T = refl F2 oneF2

test : Id T p0 p0 = F2Set oneF2 oneF2 p0 p0