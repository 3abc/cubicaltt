module nat where

data nat = zero | suc (n : nat)

zero' : nat = zero
one : nat = suc zero
two : nat = suc one


pred : nat -> nat = split
  zero -> zero
  suc n -> n

add (m : nat) : nat -> nat = split
  zero  -> m
  suc n -> suc (add m n)

add' : nat -> nat -> nat = split
  zero -> \(x : nat) -> x
  suc n -> \(x : nat) -> suc (add' n x)

id (A : U) (a : A) : A = a

data list (A : U) = nil | cons (a : A) (as : list A)

l : list nat = cons one (cons two nil)

append (A : U) : list A -> list A -> list A = split
  nil -> id (list A)
  cons x xs -> \(ys : list A) -> cons x (append A xs ys)

reverse (A : U) : list A -> list A = split
  nil -> nil
  cons x xs -> append A (reverse A xs) (cons x nil)


Id (A : U) (a0 a1 : A) : U = IdP (<?0> A) a0 a1

refl (A : U) (a : A) : Id A a a = <?0> a

mapOnPath (A B : U) (f : A -> B) (a b : A)
          (p : Id A a b) : Id B (f a) (f b) = <?0> f (p @ ?0)

funExt (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Id (B x) (f x) (g x)) :
       Id ((y : A) -> B y) f g = <?0> \(a : A) -> (p a) @ ?0

idnat : nat -> nat = split
  zero -> zero
  suc n -> suc (idnat n)

test : Id (nat -> nat) idnat (id nat) = funExt nat (\(_ : nat) -> nat) idnat (id nat) rem
  where
  rem : (n : nat) -> Id nat (idnat n) n = split
    zero -> refl nat zero
    suc n -> mapOnPath nat nat (\(x : nat) -> suc x) (idnat n) n (rem n)