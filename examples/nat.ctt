module nat where

data nat = zero | suc (n : nat)

zero' : nat = zero
one : nat = suc zero
two : nat = suc one

pred : nat -> nat = split
  zero -> zero
  suc n -> n

add (m : nat) : nat -> nat = split
  zero  -> m
  suc n -> suc (add m n)

add' : nat -> nat -> nat = split
  zero -> \(x : nat) -> x
  suc n -> \(x : nat) -> suc (add' n x)

id (A : U) (a : A) : A = a

data list (A : U) = nil | cons (a : A) (as : list A)

l : list nat = cons one (cons two nil)

append (A : U) : list A -> list A -> list A = split
  nil -> id (list A)
  cons x xs -> \(ys : list A) -> cons x (append A xs ys)

reverse (A : U) : list A -> list A = split
  nil -> nil
  cons x xs -> append A (reverse A xs) (cons x nil)

Id (A : U) (a0 a1 : A) : U = IdP (<i> A) a0 a1

refl (A : U) (a : A) : Id A a a = <i> a

mapOnPath (A B : U) (f : A -> B) (a b : A)
          (p : Id A a b) : Id B (f a) (f b) = <i> f (p @ i)

funExt (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Id (B x) (f x) (g x)) :
       Id ((y : A) -> B y) f g = <i> \(a : A) -> (p a) @ i

idnat : nat -> nat = split
  zero -> zero
  suc n -> suc (idnat n)

test : Id (nat -> nat) idnat (id nat) = funExt nat (\(_ : nat) -> nat) idnat (id nat) rem
  where
  rem : (n : nat) -> Id nat (idnat n) n = split
    zero -> refl nat zero
    suc n -> mapOnPath nat nat (\(x : nat) -> suc x) (idnat n) n (rem n)

subst (A : U) (P : A -> U) (a b : A) (p : Id A a b) (e : P a) : P b =
  transport (mapOnPath A U P a b p) e

substRefl (A : U) (P : A -> U) (a : A) (e : P a) : Id (P a) (subst A P a a (refl A a) e) e =
  refl (P a) e

singl (A : U) (a : A) : U = (x : A) * Id A a x

contrSingl (A : U) (a b : A) (p : Id A a b) :
  Id (singl A a) (a,refl A a) (b,p) = <i> (p @ i,<j> p @ i /\ j)

J (A : U) (a : A) (C : (x : A) -> Id A a x -> U)
  (d : C a (refl A a)) (x : A) (p : Id A a x) : C x p =
    subst (singl A a) T (a, refl A a) (x, p) (contrSingl A a x p) d
      where T (z : singl A a) : U = C (z.1) (z.2)

defEqJ (A : U) (a : A) (C : (x : A) -> Id A a x -> U) (d : C a (refl A a)) :
       Id (C a (refl A a)) (J A a C d a (refl A a)) d = refl (C a (refl A a)) d

test0 (A : U) (a b : A) (p : Id A a b) : Id A a a = refl A (p @ 0)
test1 (A : U) (a b : A) (p : Id A a b) : Id A b b = refl A (p @ 1)

compId (A : U) (a b c : A) (p : Id A a b) (q : Id A b c) : Id A a c =
  <i> comp A (p @ i) [ (i = 1) -> q ]