module indSusp where

import susp

suspOf (A X : U) : U = (u:X) * (v:X) * (A -> Id X u v)

funToL (A X:U) (f:susp A -> X) : suspOf A X =
  (f north,f south,\ (a:A) -> <i>f (merid{susp A} a@i))

lToFun (A X:U) (z:suspOf A X) : susp A -> X = split
 north -> z.1
 south -> z.2.1
 merid a @ i-> z.2.2 a @ i

test1 (A X:U) (z:suspOf A X) : Id (suspOf A X) (funToL A X (lToFun A X z)) z
   = refl (suspOf A X) z

rem (A X:U) (f:susp A ->X) : (u:susp A) -> Id X (lToFun A X (funToL A X f) u) (f u) = split
    north -> refl X (f north)
    south -> refl X (f south)
    merid a @ i -> refl X (f (merid{susp A} a @ i))

test2 (A X:U) (f:susp A ->X) : Id (susp A ->X) (lToFun A X (funToL A X f)) f
   = <i>\ (u:susp A) -> rem A X f u @ i

funSusp (A X:U) : Id U (susp A -> X) (suspOf A X) =
 isoId (susp A -> X) (suspOf A X) (funToL A X) (lToFun A X) (test1 A X) (test2 A X)
