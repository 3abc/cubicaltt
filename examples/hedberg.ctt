module hedberg where

import prelude

hedbergLemma (A: U) (f : (a b : A) -> Id A a b -> Id A a b) (a :A) :
  (b : A) (p : Id A a b) ->
            Id (Id A a b) (compId A a a b (f a a (refl A a)) p) (f a b p) =
  J A a (\ (b:A) (p:Id A a b) -> Id (Id A a b) (compId A a a b (f a a (refl A a)) p) (f a b p))
    (refl (Id A a a) (f a a (refl A a)))

hedberg (A : U) (h : discrete A) : set A = \(a b : A) (p q : Id A a b) ->
   let rem1 (x y : A) : exConst (Id A x y) = decConst (Id A x y) (h x y)

       f (x y : A) : Id A x y -> Id A x y = (rem1 x y).1

       fIsConst (x y : A) : const (Id A x y) (f x y) = (rem1 x y).2

       r : Id A a a = f a a (refl A a)

       rem2 : Id (Id A a b) (compId A a a b r p) (f a b p) = hedbergLemma A f a b p

       rem3 : Id (Id A a b) (compId A a a b r q) (f a b q) = hedbergLemma A f a b q

       rem4 : Id (Id A a b) (f a b p) (f a b q) = fIsConst a b p q

       rem5 : Id (Id A a b) (compId A a a b r p) (compId A a a b r q) =
         compDown (Id A a b) (compId A a a b r p) (f a b p) (compId A a a b r q)
                  (f a b q) rem2 rem3 rem4
  in lemSimpl A a a b r p q rem5
