module prelude where

Id (A : U) (a0 a1 : A) : U = IdP (<i> A) a0 a1

refl (A : U) (a : A) : Id A a a = <i> a

mapOnPath (A B : U) (f : A -> B) (a b : A)
          (p : Id A a b) : Id B (f a) (f b) = <i> f (p @ i)

funExt (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Id (B x) (f x) (g x)) :
       Id ((y : A) -> B y) f g = <i> \(a : A) -> (p a) @ i


subst (A : U) (P : A -> U) (a b : A) (p : Id A a b) (e : P a) : P b =
  transport (mapOnPath A U P a b p) e

substRefl (A : U) (P : A -> U) (a : A) (e : P a) :
  Id (P a) (subst A P a a (refl A a) e) e = refl (P a) e

singl (A : U) (a : A) : U = (x : A) * Id A a x

contrSingl (A : U) (a b : A) (p : Id A a b) :
  Id (singl A a) (a,refl A a) (b,p) = <i> (p @ i,<j> p @ i/\j)

J (A : U) (a : A) (C : (x : A) -> Id A a x -> U)
  (d : C a (refl A a)) (x : A) (p : Id A a x) : C x p =
    subst (singl A a) T (a, refl A a) (x, p) (contrSingl A a x p) d
      where T (z : singl A a) : U = C (z.1) (z.2)

defEqJ (A : U) (a : A) (C : (x : A) -> Id A a x -> U) (d : C a (refl A a)) :
       Id (C a (refl A a)) (J A a C d a (refl A a)) d = refl (C a (refl A a)) d

inv (A : U) (a b : A) (p : Id A a b) : Id A b a = <i> p @ -i

compId (A : U) (a b c : A) (p : Id A a b) (q : Id A b c) : Id A a c =
  <i> comp A (p @ i) [ (i = 1) -> q ]

compId' (A : U) (a b c : A) (p : Id A a b) (q : Id A b c) : Id A a c =
  subst A (Id A a) b c q p

compId'' (A : U) (a b : A) (p : Id A a b) : (c : A) -> (q : Id A b c) -> Id A a c =
  J A a ( \ (b : A) (p : Id A a b) -> (c : A) -> (q : Id A b c) -> Id A a c) rem b p
    where rem (c : A) (p : Id A a c) : Id A a c = p

compUp (A : U) (a a' b b' : A)
       (p : Id A a a') (q : Id A b b') (r : Id A a b) : Id A a' b' =
  <i> comp A (r @ i) [(i = 0) -> p, (i = 1) -> q]

compDown (A : U) (a a' b b' : A)
         (p : Id A a a') (q: Id A b b') : Id A a' b' -> Id A a b =
 compUp A a' a b' b (inv A a a' p) (inv A b b' q)

idfun (A : U) (a : A) : A = a

test0 (A : U) (a b : A) (p : Id A a b) : Id A a a = refl A (p @ 0)
test1 (A : U) (a b : A) (p : Id A a b) : Id A b b = refl A (p @ 1)

compEmpty (A : U) (a b : A) (p : Id A a b) : Id A a b =
  <i> comp A (p @ i) [ ]

kan (A : U) (a b c d : A) (p : Id A a b) (q : Id A a c)
                          (r : Id A b d) : Id A c d =
  <i> comp A (p @ i) [ (i = 0) -> q, (i = 1) -> r ]

lemSimpl (A : U) (a b c : A) (p : Id A a b) (q q' : Id A b c)
          (s : Id (Id A a c) (compId A a b c p q) (compId A a b c p q')) : Id (Id A b c) q q' =
  <j> <k> comp A a [ (j = 0) -> <i> comp A (p @ i) [ (i = 1) -> <l> q @ k /\ l],
                     (j = 1) -> <i> comp A (p @ i) [ (i=1) -> <l> q' @ k /\ l],
                     (k = 0)  -> p,
                     (k = 1)  -> s @ j ]

isoId (A B : U) (f : A -> B) (g : B -> A)
      (s : (y:B) -> Id B (f (g y)) y)
      (t : (x:A) -> Id A (g (f x)) x) : Id U A B =
      <i> glue B [ (i = 0) -> (A,f,g,s,t) ]

--         u
--    a0 -----> a1
--    |         |
-- r0 |         | r1
--    |         |
--    V         V
--    b0 -----> b1
--         v

Square (A : U) (a0 a1 : A) (u : Id A a0 a1)
               (b0 b1 : A) (v : Id A b0 b1)
               (r0 : Id A a0 b0) (r1 : Id A a1 b1) : U
  = IdP (<i> (IdP (<j> A) (u @ i) (v @ i))) r0 r1

constSquare (A : U) (a : A) (p : Id A a a) : Square A a a p a a p p p =
  <i j> comp A a
     [(i = 0) -> <k> p @ (j \/ - k),
      (i = 1) -> <k> p @ (j /\ k),
      (j = 0) -> <k> p @ (i \/ - k),
      (j = 1) -> <k> p @ (i /\ k)]

prop (A : U) : U = (a b : A) -> Id A a b
set (A : U) : U = (a b : A) -> prop (Id A a b)
groupoid (A : U) : U = (a b : A) -> set (Id A a b)

propSet (A : U) (h : prop A) (a b : A) (p q : Id A a b) : Id (Id A a b) p q =
 <j i> comp A a [ (i=0) -> h a a
                , (i=1) -> h a b
                , (j=0) -> h a (p @ i)
                , (j=1) -> h a (q @ i)]

propIsProp (A : U) (f g : prop A) : Id (prop A) f g =
 <i> \(a b :A) -> (propSet A f a b (f a b) (g a b)) @ i

setIsProp (A : U) (f g : set A) : Id (set A) f g =
 <i> \(a b :A) -> (propIsProp (Id A a b) (f a b) (g a b)) @ i

propPi (A : U) (B : A -> U) (h : (x : A) -> prop (B x))
       (f0 f1 : (x : A) -> B x) : Id ((x : A) -> B x) f0 f1 
  = <i> \ (x:A) -> (h x (f0 x) (f1 x)) @ i

IdS (A : U) (P : A -> U) (a0 a1 : A) (p : Id A a0 a1) (u0 : P a0) (u1 : P a1) : U =
  IdP (<i> P (p @ i)) u0 u1

lemPropF (A : U) (P : A -> U) (pP : (x : A) -> prop (P x)) (a0 a1 : A)
         (p : Id A a0 a1) (b0 : P a0) (b1 : P a1) : IdS A P a0 a1 p b0 b1 =
  <i> (pP (p @ i) (transport (<j> P (p @ i /\ j)) b0)
          (transport (<j> P (p @ i \/ -j)) b1)) @ i