module integer where

import int

data int = pos (n : nat)
         | neg (n : nat)
         | zeroP <i> [(i=0) -> pos zero, (i=1) -> neg zero]

zeroP' : Id int (pos zero) (neg zero) = <i> zeroP {int} @ i

sucInt : int -> int = split
  pos n -> pos (suc n)
  neg n -> sucNat n
    where sucNat : nat -> int = split
            zero -> pos one
            suc n -> neg n
  zeroP @ i -> pos one

predInt : int -> int = split
  pos n -> predNat n
    where predNat : nat -> int = split
	    zero -> neg one
	    suc n -> pos n
  neg n -> neg (suc n)
  zeroP @ i -> neg one

toZ : int -> Z = split
  pos n -> inr n
  neg n -> auxToZ n
    where auxToZ : nat -> Z = split
      zero -> inr zero
      suc n -> inl n
  zeroP @ i -> zeroZ

fromZ : Z -> int = split
  inl n -> neg (suc n)
  inr n -> pos n

toZK : (a : Z) -> Id Z (toZ (fromZ a)) a = split
  inl n -> refl Z (inl n)
  inr n -> refl Z (inr n)

fromZK : (a : int) -> Id int (fromZ (toZ a)) a = split
  pos n -> refl int (pos n)
  neg n -> rem n
    where rem : (n : nat) -> Id int (fromZ (toZ (neg n))) (neg n) = split
      zero -> zeroP'
      suc m -> refl int (neg (suc m))
  zeroP @ i -> <j> zeroP' @ i /\ j

isoIntZ : Id U Z int = isoId Z int fromZ toZ fromZK toZK

intSet : set int = subst U set Z int isoIntZ ZSet

-- a concrete instance

T : U = Id int (pos zero) (pos zero)
p0 : T = refl int (pos zero)
p1 : T = compId int (pos zero) (neg zero) (pos zero) zeroP' (<i>zeroP'@-i)

test1 : Id T p0 p1 = intSet (pos zero) (pos zero) p0 p1

test2 : Id T p0 p1 =
 <i j> comp int (pos zero)
    [ (i = 1) ->
  <k> comp int
          (comp int (zeroP {int} @ j)
          [ (j = 1) -> <l> zeroP {int} @ -l ])
       [ (k = 0) -> <l> comp int (pos zero)
                           [ (l = 0) -> <m> comp int (comp int (zeroP {int} @ (j /\ m))
                                                          [ (m = 1) -> <n> comp int (zeroP {int} @ j)
                                                                   [ (j = 1) -> <p> zeroP {int} @ (-n \/ -p) ] ])
                                               [ (j = 1) -> <n> comp int (zeroP {int} @ (-n /\ m))
                                                                   [ (m = 1) -> <p> zeroP {int} @ (-n /\ -p) ] ]]]]