module integer where

import int

data int = pos (n : nat)
         | neg (n : nat)
         | zeroP @ pos zero ~ neg zero

zeroP' : Id int (pos zero) (neg zero) = <i> zeroP {int} @ i

sucInt : int -> int = split
  pos n -> pos (suc n)
  neg n -> sucNat n
    where sucNat : nat -> int = split
            zero -> pos one
            suc n -> neg n
  zeroP @ i -> pos one

predInt : int -> int = split
  pos n -> predNat n
    where predNat : nat -> int = split
	    zero -> neg one
	    suc n -> pos n
  neg n -> neg (suc n)
  zeroP @ i -> neg one

toZ : int -> Z = split
  pos n -> inr n
  neg n -> fun n
    where fun : nat -> Z = split
      zero -> zeroZ
      suc n -> inl n
  zeroP @ i -> zeroZ

fromZ : Z -> int = split
  inl n -> neg (suc n)
  inr n -> pos n

toZK : (a : Z) -> Id Z (toZ (fromZ a)) a = split
  inl n -> refl Z (inl n)
  inr n -> refl Z (inr n)

fromZK : (a : int) -> Id int (fromZ (toZ a)) a = split
  pos n -> refl int (pos n)
  neg n -> rem n
    where rem : (n : nat) -> Id int (fromZ (toZ (neg n))) (neg n) = split
      zero -> zeroP'
      suc m -> ? -- refl int (neg (suc n))
  zeroP @ i -> ? -- <j> zeroP' @ i /\ j

isoIntZ : Id U Z int = isoId Z int fromZ toZ fromZK toZK

intSet : set int = subst U set Z int isoIntZ ZSet
